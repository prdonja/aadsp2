1     						################################################################################
2     						##*/**
3     						##** @file multitapEcho.a
4     						##**
5     						##** Module:
6     						##** Description:
7     						##** $Source: $
8     						##** $Revision: $
9     						##** $Date: $
10    						##** $Author: $
11    						##**
12    						##**/
13    						################################################################################
14    							.include "dsplib/os_asm.h" # include the definition of ROM functions and OS global variables
14     >> open include file: C:/CirrusDSP/include/dsplib/os_asm.h
1+    						 /**
2+    						 * @file
3+    						 * @brief DSP OS support.
4+    						 *
5+    						 * Project/Subproject: Cirrus Logic C library/ccc <p>
6+    						 * Component: DSP OS support.
7+    						 *
8+    						 * Language: English, Code page: ASCII, Coding standard: MG-CPP-DOXY-OCT08 <p>
9+    						 */
10+   						/** @defgroup os_interface OS interface
11+   						 *  These functions are called at various points during system
12+   						 *  initialization, before normal audio processing begins.
13+   						 */
14+   						
15+   						/** @defgroup module_api Module API
16+   						 *  These data structures are required for the OS to be able to call
17+   						 *  audio processing code. Code is packaged as a <em>module</em>. 
18+   						 *  One or more modules can be linked together as an <em>overlay</em>.
19+   						 *
20+   						 *  Each module must declare an instance of a mct, mcv, and mif.
21+   						 *
22+   						 *  @ingroup os_interface
23+   						 */
24+   						 
25+   						/** @defgroup call_convention Calling conventions
26+   						 *  These typedefs specify calling conventions expected by the OS when calling
27+   						 *  certain application code entry points.
28+   						 *  @ingroup os_interface
29+   						 */
30+   						 
31+   						/** @defgroup useful_types Useful typedefs
32+   						 *  These typedefs are useful in dealing with data provided by the OS.
33+   						 *  @ingroup os_interface
34+   						 */
35+   						
36+   						 
37+   						 .if !defined(_framework_interface_asm_h_)
38+   	 0000				_framework_interface_asm_h_
39+   						
40+   						
41+   						
42+   						/* Module Control Vector peek/poke function prototypes.*/
43+   						
44+   						/**
45+   						 * @brief return the pointer to a module's Module Control Vector (MCV), if it exists.
46+   						 *
47+   						 * The relationship between memory maps, overlays, the "*.uld" file, modules, module interface table, module control
48+   						 * vector is as follows:
49+   						 *
50+   						 * \li A memory map partitions the DSP's memory into functional units such as Decoder (DEC),
51+   						 * Matrix Processing Modules (MPM), Virtual Processing Modules (VPM), and Post Processing Modules (PPM)
52+   						 * \li the binary file that is downloaded to an overlay, such as the PPM, has a .uld extension. Example: myPPM.ULD is downloaded to the PPM overlay.
53+   						 * \li The .uld has an overlay definition table (ODT) to determine what module or modules are present, and the order
54+   						 *  that this chain of modules processes audio data. The ODT is essentially an array, and each element points to a
55+   						 *  Module's Module Interface Table or MIF. If the PPM overlay has parametric EQ (PEQ), bass manager (BM), and audio manager (AM), and in that
56+   						 *  order, the ODT will have four entries- a pointer to the PEQ MIF, pointer to the BM MIF, pointer to the AM MIF,
57+   						 *  and then a terminating entry of zero.
58+   						 * \li Each module has a Module Interface table or MIF, which is an array of pointers. The first element in the MIF, or MIF[0], is a pointer to the
59+   						 * Module Control Vector or MCV. The second, or MIF[1], is a pointer to the Module Control Table or MCT.
60+   						 * \li cl_get_mcv_pointer returns MIF[0] which is a ptr_MCV for a particular module. For example,
61+   						 * cl_get_mcv_pointer(0x3) returns AudioManagerMIF[0], which is ptr_AudioManager_MCV.
62+   						 *
63+   						 * Again,
64+   						 * \li ODT[idx] is a ptr_MIF
65+   						 * \li MIF[0] is a ptr_MCV. cl_get_mcv_pointer() returns a ptr_MCV
66+   						 * \li MIF[1] is a ptr_MCT
67+   						 *
68+   						 * Usage:
69+   						 * cl_get_mcv_pointer() retrieves the MCV pointer for particular module. If the module is
70+   						 * not loaded, return zero pointer. Use this before doing peek to ensure that you will get a valid data.
71+   						 *
72+   						 * @param   moduleID (a0)
73+   						 *          ID of the module
74+   						 *
75+   						 * @return (a0)
76+   						 *          __memY void * of the MCV[0]
77+   						 *
78+   						 * @ingroup os_interface
79+   						 *
80+   						 *  Registers used (assembly programmers only):
81+   						 *    a0, a1, b1, i0, i1, nm6, nm7
82+   						 */
83+   						
84+   	 0000				 .extern _cl_get_mcv_pointer
85+   						 
86+   						/** 
87+   						 * @brief mcv peek function.
88+   						 *
89+   						 * Function that peeks a value in MCV for particular module
90+   						 * If module is not loaded routine will return zero.
91+   						 *
92+   						 * @param   moduleID (a0)
93+   						 *          ID of the module
94+   						 *
95+   						 * @param   index (a1)
96+   						 *          MCV index (must be 0x7FF or less)
97+   						 *
98+   						 * @return (a0)
99+   						 *          integer value of the MCV[index]
100+  						 *
101+  						 * @ingroup os_interface
102+  						 *
103+  						 *  Registers used (assembly programmers only):
104+  						 *     a0, a1, b1, i0, i1, nm6, nm7
105+  						 */
106+  	 0000				 .extern _cl_mcv_peek
107+  						
108+  						/**
109+  						 * @brief mcv poke function.
110+  						 *
111+  						 * Function that poke integer value in MCV for particular module.
112+  						 * If module is not loaded poke will be ignored.
113+  						 *
114+  						 * @param   moduleID (a0)
115+  						 *          ID of the module
116+  						 *
117+  						 * @param   index (a1)
118+  						 *          MCV index (must be 0x7FF or less)
119+  						 *
120+  						 * @param   value (b0)
121+  						 *          value that will be written to MCV[index]
122+  						 *
123+  						 * @return
124+  						 *          nothing
125+  						 *
126+  						 * @ingroup os_interface
127+  						 *
128+  						 *  Registers used (assembly programmers only):
129+  						 *     a0, a1, b1, i0, i1, nm6, nm7
130+  						 */
131+  	 0000				 .extern _cl_mcv_poke
132+  						
133+  						/** Request a chunk of X memory with no alignment requirement.
134+  						 *  This function should be called inside of a premalloc module
135+  						 *  entry point. After the OS finishes heap allocations, the pointer
136+  						 *  should be initialized with the address of the requested memory.
137+  						 *
138+  						 *  @param[in] pointer (i0)
139+  						 *             pointer to an X memory pointer in X memory
140+  						 *
141+  						 *  @param[in] size (x0)
142+  						 *             number of words to allocate.
143+  						 *             Assembly programmers only: note that the malloc request modifies register x0.
144+  						 *             Therefore, if malloc requests are performed back to back (such as within a loop) please remember to restore x0 between requests.
145+  						 *
146+  						 *  Registers used (assembly programmers only):
147+  						 *    i1,i6,i7,a0,a3,b3,x0
148+  						 *
149+  						 *  <b>VERY IMPORTANT:</b> this routine, cl_mallocX, clobbers I7, the C stack pointer.
150+  						 *  Although this routine's C wrapper preserves I7, the C developer must be sure
151+  						 *  to preserve I7 if his or her program bypasses the wrapper and calls cl_mallocX
152+  						 *  directly.
153+  						 *
154+  						 *  @ingroup os_interface
155+  						 */
156+  	 0000				  .extern cl_mallocX
157+  						
158+  						/** Request a chunk of Y memory with no alignment requirement.
159+  						 *  This function should be called inside of a premalloc module
160+  						 *  entry point. After the OS successfully finishes heap allocations, the pointer
161+  						 *  contains the address of the requested memory.
162+  						 *
163+  						 *  @param[in] pointer (i0)
164+  						 *             pointer to a Y memory pointer in X memory
165+  						 *
166+  						 *  @param[in] size (x0)
167+  						 *             number of words to allocate
168+  						 *             Assembly programmers only: note that the malloc request modifies register x0.
169+  						 *             Therefore, if malloc requests are performed back to back (such as within a loop) please remember to restore x0 between requests.
170+  						 *
171+  						 *  Registers used (assembly programmers only):
172+  						 *    i1,i6,i7,a0,a3,b3,x0
173+  						 *
174+  						 *  <b>VERY IMPORTANT:</b> this routine, cl_mallocY, clobbers I7, the C stack pointer.
175+  						 *  Although this routine's C wrapper preserves I7, the C developer must be sure
176+  						 *  to preserve I7 if his or her program bypasses the wrapper and calls cl_mallocY
177+  						 *  directly.
178+  						 *
179+  						 *  @ingroup os_interface
180+  						 */
181+  	 0000				  .extern cl_mallocY
182+  						
183+  						/** Request a chunk of XY (L) memory with no alignment requirement.
184+  						 *  This function should be called inside of a premalloc module
185+  						 *  entry point. After the OS successfully finishes heap allocations, the pointer
186+  						 *  contains the address of the requested memory.
187+  						 *
188+  						 *  @param[in] pointer (i0)
189+  						 *             pointer to an XY memory pointer in X memory
190+  						 *
191+  						 *  @param[in] size (x0)
192+  						 *             number of words to allocate
193+  						 *             Assembly programmers only: note that the malloc request modifies register x0.
194+  						 *             Therefore, if malloc requests are performed back to back (such as within a loop) please remember to restore x0 between requests.
195+  						 *
196+  						 *  Registers used (assembly programmers only):
197+  						 *    i1,i6,i7,a0,a3,b3,x0
198+  						 *
199+  						 *  <b>VERY IMPORTANT:</b> this routine, cl_mallocL, clobbers I7, the C stack pointer.
200+  						 *  Although this routine's C wrapper preserves I7, the C developer must be sure
201+  						 *  to preserve I7 if his or her program bypasses the wrapper and calls cl_mallocL
202+  						 *  directly.
203+  						 *
204+  						 *  @ingroup os_interface
205+  						 */
206+  	 0000				  .extern cl_mallocL
207+  						
208+  						/** Request a chunk of X memory aligned on a modulo boundary.
209+  						 *  This function should be called inside of a premalloc module
210+  						 *  entry point. After the OS successfully finishes heap allocations, the pointer
211+  						 *  contains the address of the requested memory.
212+  						 *
213+  						 *  @param[in] pointer (i0)
214+  						 *             pointer to an X memory pointer in X memory
215+  						 *
216+  						 *  @param[in] size (x0)
217+  						 *             number of words to allocate. <b>SIZE MUST BE A POWER OF 2.</b>
218+  						 *             Address of allocated memory is guaranteed to be
219+  						 *             an even multiple of the next power of 2 >= size.
220+  						 *             Assembly programmers only: note that the malloc request modifies register x0.
221+  						 *             Therefore, if malloc requests are performed back to back (such as within a loop) please remember to restore x0 between requests.
222+  						 *
223+  						 *  Registers used (assembly programmers only):
224+  						 *    i1,i6,i7,a0,a3,b3,x0
225+  						 *
226+  						 *  <b>VERY IMPORTANT:</b> this routine, cl_mallocModX, clobbers I7, the C stack pointer.
227+  						 *  Although this routine's C wrapper preserves I7, the C developer must be sure
228+  						 *  to preserve I7 if his or her program bypasses the wrapper and calls cl_mallocModX
229+  						 *  directly.
230+  						 *
231+  						 *  @ingroup os_interface
232+  						 */
233+  	 0000				  .extern cl_mallocModX
234+  						
235+  						/** Request a chunk of Y memory aligned on a modulo boundary.
236+  						 *  This function should be called inside of a premalloc module
237+  						 *  entry point. After the OS successfully finishes heap allocations, the pointer
238+  						 *  contains the address of the requested memory.
239+  						 *
240+  						 *  @param[in] pointer (i0)
241+  						 *             pointer to an X memory pointer in X memory
242+  						 *
243+  						 *  @param[in] size (x0)
244+  						 *             number of words to allocate. <b>SIZE MUST BE A POWER OF 2.</b>
245+  						 *             Address of allocated memory is guaranteed to be
246+  						 *             an even multiple of the next power of 2 >= size.
247+  						 *             Assembly programmers only: note that the malloc request modifies register x0.
248+  						 *             Therefore, if malloc requests are performed back to back (such as within a loop) please remember to restore x0 between requests.
249+  						 *
250+  						 *  Registers used (assembly programmers only):
251+  						 *    i1,i6,i7,a0,a3,b3,x0
252+  						 *
253+  						 *  <b>VERY IMPORTANT:</b> this routine, cl_mallocModY, clobbers I7, the C stack pointer.
254+  						 *  Although this routine's C wrapper preserves I7, the C developer must be sure
255+  						 *  to preserve I7 if his or her program bypasses the wrapper and calls cl_mallocModY
256+  						 *  directly.
257+  						 *
258+  						 *  @ingroup os_interface
259+  						 */
260+  	 0000				  .extern cl_mallocModY
261+  						
262+  						/** Request a chunk of XY (L) memory aligned on a modulo boundary.
263+  						 *  This function should be called inside of a premalloc module
264+  						 *  entry point. After the OS successfully finishes heap allocations, the pointer
265+  						 *  contains the address of the requested memory.
266+  						 *
267+  						 *  @param[in] pointer (i0)
268+  						 *             pointer to an X memory pointer in X memory
269+  						 *
270+  						 *  @param[in] size (x0)
271+  						 *             number of words to allocate. <b>SIZE MUST BE A POWER OF 2.</b>
272+  						 *             Address of allocated memory is guaranteed to be
273+  						 *             an even multiple of the next power of 2 >= size.
274+  						 *             Assembly programmers only: note that the malloc request modifies register x0.
275+  						 *             Therefore, if malloc requests are performed back to back (such as within a loop) please remember to restore x0 between requests.
276+  						 *
277+  						 *  Registers used (assembly programmers only):
278+  						 *    i1,i6,i7,a0,a3,b3,x0
279+  						 *
280+  						 *  <b>VERY IMPORTANT:</b> this routine, cl_mallocModL, clobbers I7, the C stack pointer.
281+  						 *  Although this routine's C wrapper preserves I7, the C developer must be sure
282+  						 *  to preserve I7 if his or her program bypasses the wrapper and calls cl_mallocModL
283+  						 *  directly.
284+  						 *
285+  						 * <b>Note:</b> The use of cl_mallocModL in a .mwproj or .pwproj may require adjustment of DSP Composer properties.
286+  						 * For example, if the maximum cl_mallocModL size is 1024 and the module or primitive is used in a CS48LXX project,
287+  						 * Set File->Properties->Maximum Aligned Heap Required = 1024 in composer.
288+  						 * This sets the heap base on a 1024 boundary. Heap base is not an issue for a .uwproj using cl_mallocModL.
289+  						 *
290+  						 *  @ingroup os_interface
291+  						 */
292+  	 0000				  .extern cl_mallocModL
293+  						
294+  						/**
295+  						 * @brief Sends an unsolicited message to the host.
296+  						 *
297+  						 * @param[in] pPayload (i7) pointer to the first word in the message body, in X memory.
298+  						 *
299+  						 * @param[in] pPayload (i6) size of the message, in words.
300+  						 *
301+  						 * @return (a3) returns nonzero for success and 0 for failure.
302+  						 *
303+  						 *  Modifies: i5, b3, nm7, nm5
304+  						 *
305+  						 * @ingroup os_interface
306+  						 */
307+  	 0000				 .extern cl_send_unsol_msg
308+  						
309+  						/**
310+  						* @brief function used to set or clear a GPO bit
311+  						*
312+  						* This function will work on CS48L10, CS47XXX, and CS485XX but not CS4953X, CS497XX nor CS498XX. (single core only)
313+  						*
314+  						* Note that the host must set bits 12 and 13 of the OS MCV at Kickstart. Example: ucmd 8140000000003000
315+  						*
316+  						* Note also, that the GPIO index must be turned on and direction set to out.
317+  						*
318+  						* Example for GPIO 16
319+  						*
320+  						* Enable (ucmd 8140003D00010000)
321+  						*
322+  						* Set Direction=Out (ucmd 8140003C00010000)
323+  						*
324+  						* Note that ucmd 814HHHHH hhhhhhhh is a "poke-OR"
325+  						*
326+  						* @param[in] gpo_state (a0). gpo_state=1 to set the GPO bit. gpi_state=0 to clear the GPO bit.
327+  						*
328+  						* @param[in] gpo_mask (a1). Bitmask to determine which GPO bit to set or clear. Bitmask = (1 << gpo_index)
329+  						* For example: for GPO 16, which is the LED on the CS47XXX daughter card marked "GPO16," use (0x1<<16) == 0x00010000
330+  						*
331+  						* modifies registers a0,a1,b0,b1
332+  						*
333+  						* @ingroup os_interface
334+  						*/
335+  	 0000				   .extern cl_poke_gpo
336+  						
337+  						/**
338+  						* @brief query the status of a GPI bit
339+  						*
340+  						* This function will work on CS48L10, CS47XXX, and CS485XX but not CS4953X, CS497XX nor CS498XX. (single core only)
341+  						*
342+  						* Note that the host must set bits 12 and 13 of the OS MCV at Kickstart. Example: ucmd 8140000000003000
343+  						*
344+  						* Note also, that the GPIO index must be turned on and direction set to in.
345+  						*
346+  						* Example for GPIO 3:
347+  						*
348+  						*   Enable (ucmd 8140003D00000008)
349+  						*
350+  						*   Set Direction=in (ucmd 8180003Cfffffff7)
351+  						*
352+  						* Note that 814HHHHH hhhhhhhh is a "poke-OR" and 818HHHHH hhhhhhhh is a poke-AND
353+  						*
354+  						* @param[in] gpi_mask (a0). Mask used to determine which GPI to query. For example: for GPI 3,
355+  						*   which is the pushbutton on the CS47XXX daughter card marked "s2," use (1<<3) == 0x00000008
356+  						*
357+  						* @return (a0) returns the state of the GPI. 
358+  						*
359+  						* modifies registers a0,a1,b0,b1
360+  						*
361+  						* @ingroup os_interface
362+  						*/
363+  	 0000				  .extern cl_peek_gpi
364+  						
365+  						/**
366+  						* @brief Register a callback function, to be called when a gpi changes state.
367+  						*
368+  						*  @param[in] function_ptr (i0) =  this function MUST save/restore all modified registers
369+  						*  User callback function may assume that a 32 bit value, with bits set for any gpi
370+  						*  pins that caused the callback function to be called, will be available in a0h.
371+  						*
372+  						*  @param[in] gpio_mask (a0) = bit mask for which GPIO will be monitored for interrupt.
373+  						*  Bit 0 corresponds to GPIO0, bit 1 corresponds to GPIO1 and so on.
374+  						*
375+  						*  @param[in] intlvl_setting(a1) When this is 1, level-based interrupts are set for pins
376+  						*  corresponding to gpio_mask. When this is 0, edge-based interrupts are set for pins
377+  						*  corresponding to gpio_mask.  Note: If intlvl_setting is set to 1, then the library isr code will wait until the irq line
378+  						*  goes back to it's non-active state before clearing the IRQ_STICKY bits and exiting the
379+  						*  isr.  If this period is too long, the user is advised to use edge-based interrupts instead.
380+  						*
381+  						*  @param[in] inthilo_setting(b0) When this is 1, level-based interrupts are active high
382+  						*  and edge-based interrupts are positive edge for pins corresponding to gpio_mask.
383+  						*  When this is 0, level based interrupts are active low and edge-based interrupts are
384+  						*  negative edge for pins corresponding to gpio_mask.
385+  						*
386+  						*  @return (a0) == 1 (success)
387+  						*
388+  						* Modifies: a2, a3, x3
389+  						*
390+  						*  @ingroup os_interface
391+  						*/
392+  	 0000				  .extern cl_os_register_gpi_handler
393+  						
394+  						/*=================================================================*/
395+  						
396+  						/**
397+  						* @brief I2C write command, non-blocking
398+  						*
399+  						* This function works on CS48L10 and CS47XXX, but not CS485XX, CS4953X, CS497XX nor CS498XX.
400+  						*
401+  						* @param[in] i2c_command_word (x2)
402+  						*        Bits  6:0  -- Slave address
403+  						*        Bits 19:8 -- Clock divider value
404+  						*        Bits 22:20 -- Bytes per message
405+  						*
406+  						* @param[in] count_of_message_words (i6)
407+  						*
408+  						* @param[in] pxWriteMsg_Fifo (i0) NOTE: bytes 0x00YYYYYY are used if count==3, 0x0000YYYY if count==2, and 0x000000YY if count==1.
409+  						*
410+  						* @return (b1) error_status. On CS47LXX, {0=No error, 1=Time out error}
411+  						*                            On CS48LXX, {0x0000 0000= No Error,
412+  						*                            0x0000 0001= Illegal I2C transaction issued
413+  						*                            0x0000 0002= IIC NO ACK error
414+  						*                            0x0000 0004= Time out}
415+  						*
416+  						* <b>IMPORTANT: For CS48L2X, CS47L3X, use C platform library instead of DSP Library for I2C operations. </b>
417+  						* Notes: Correct usage model is to issue blocking calls for one time communication
418+  						* as in post-kickstart stage (i2c functions cannot be used at pre-kickstart) and non-blocking calls for periodic transactions as in
419+  						* module block or timer routines.
420+  						*
421+  						*  \code
422+  						*  //Example: send the equivalent of iic_cfg -a 0xa0 -w 00 00 EC, until it succeeds, within the block routine.
423+  						*   if (success==0)
424+  						*  {
425+  						*     g_cmd_word=cl_I2C_Command_Word(0x50,0xF80,3);
426+  						*     g_msgbuf=0x000000EC; //with bytes per message of 0x3, bytes 0x00YYYYYY are used
427+  						*     retval=cl_I2C_Nonblocking_WriteMsg(g_cmd_word,3,&g_msgbuf);
428+  						*     if (retval==0){
429+  						*	    success=1;
430+  						*     }
431+  						*  }
432+  						*  \endcode
433+  						*
434+  						* @ingroup os_interface
435+  						*/
436+  	 0000				  .extern cl_I2C_Nonblocking_WriteMsg
437+  						
438+  						/**
439+  						* @brief I2C read command, non-blocking
440+  						*
441+  						* This function works on CS48L10 and CS47XXX, but not CS485XX, CS4953X, CS497XX nor CS498XX.
442+  						*
443+  						* @param[in] i2c_command_word (x2)
444+  						*        Bits  6:0  -- Slave address
445+  						*        Bits 19:8 -- Clock divider value
446+  						*        Bits 22:20 -- Bytes per message
447+  						*
448+  						* @param[in] count_of_message_words (i6)
449+  						*
450+  						* @param[in] pxReadMsg_Fifo (i0)
451+  						*
452+  						* @return (b1) error_status. On CS47LXX, {0=No error, 1=Time out error}
453+  						*                            On CS48LXX, {0x0000 0000= No Error,
454+  						*                            0x0000 0001= Illegal I2C transaction issued
455+  						*                            0x0000 0002= IIC NO ACK error
456+  						*                            0x0000 0004= Time out}
457+  						*
458+  						* <b>IMPORTANT: For CS48L2X, CS47L3X, use C platform library instead of DSP Library for I2C operations. </b>
459+  						* Notes: Correct usage model is to issue blocking calls for one time communication
460+  						* as in post-kickstart stage (i2c functions cannot be used at pre-kickstart) and non-blocking calls for periodic transactions as in
461+  						* module block or timer routines.
462+  						*
463+  						* @ingroup os_interface
464+  						*/
465+  	 0000				  .extern cl_I2C_Nonblocking_ReadMsg
466+  						
467+  						/**
468+  						* @brief I2C read command, blocking
469+  						*
470+  						* This function works on CS48L10 and CS47XXX, but not CS485XX, CS4953X, CS497XX nor CS498XX.
471+  						*
472+  						* @param[in] i2c_command_word (x2)
473+  						*        Bits  6:0  -- Slave address
474+  						*        Bits 19:8 -- Clock divider value
475+  						*        Bits 22:20 -- Bytes per message
476+  						*
477+  						* @param[in] count_of_message_words (i6)
478+  						*
479+  						* @param[in] time_out_ms (x3) time out in milliseconds
480+  						*
481+  						* @param[in] pxReadMsg_Fifo (i0)
482+  						*
483+  						* @return (b1) error_status. On CS47LXX, {0=No error, 1=Time out error}
484+  						*                            On CS48LXX, {0x0000 0000= No Error,
485+  						*                            0x0000 0001= Illegal I2C transaction issued
486+  						*                            0x0000 0002= IIC NO ACK error
487+  						*                            0x0000 0004= Time out}
488+  						*
489+  						* <b>IMPORTANT: For CS48L2X, CS47L3X, use C platform library instead of DSP Library for I2C operations. </b>
490+  						* Notes: Correct usage model is to issue blocking calls for one time communication
491+  						* as in post-kickstart stage (i2c functions cannot be used at pre-kickstart) and non-blocking calls for periodic transactions as in
492+  						* module block or timer routines.
493+  						*
494+  						* @ingroup os_interface
495+  						*/
496+  	 0000				  .extern cl_I2C_ReadMsg
497+  						
498+  						/**
499+  						* @brief I2C write command, blocking.
500+  						*
501+  						* This function works on CS48L10 and CS47XXX, but not CS485XX, CS4953X, CS497XX nor CS498XX.
502+  						*
503+  						* @param[in] i2c_command_word (x2)
504+  						*        Bits  6:0  -- Slave address
505+  						*        Bits 19:8 -- Clock divider value
506+  						*        Bits 22:20 -- Bytes per message. NOTE: for 3, bytes 0x00YYYYYY are used. For 2, bytes 0x0000YYYY are used and for 1, bytes 0x000000YY are used.
507+  						*
508+  						* @param[in] count_of_message_words (i6)
509+  						*
510+  						* @param[in] time_out_ms (x3) time out in milliseconds
511+  						*
512+  						* @param[in] pxWriteMsg_Fifo (i0)
513+  						*
514+  						* @return (b1) error_status. On CS47LXX, {0=No error, 1=Time out error}
515+  						*                            On CS48LXX, {0x0000 0000= No Error,
516+  						*                            0x0000 0001= Illegal I2C transaction issued
517+  						*                            0x0000 0002= IIC NO ACK error
518+  						*                            0x0000 0004= Time out}
519+  						*
520+  						* <b>IMPORTANT: For CS48L2X, CS47L3X, use C platform library instead of DSP Library for I2C operations. </b>
521+  						* Notes: Correct usage model is to issue blocking calls for one time communication
522+  						* as in post-kickstart stage (i2c functions cannot be used at pre-kickstart) and non-blocking calls for periodic transactions as in
523+  						* module block or timer routines.
524+  						*
525+  						* \code
526+  						*   //example: send the equivalent of iic_cfg -a 0xa0 -w 00 00 AC
527+  						*   int g_cmd_word=cl_I2C_Command_Word(0x50,0xF80,3);
528+  						*   int g_msgbuf=0x000000ac; //note that with bytes per message==3, bytes 0x00YYYYYY are used.
529+  						*	cl_I2C_WriteMsg(g_cmd_word,3,100,&g_msgbuf);
530+  						* \endcode
531+  						*
532+  						* @ingroup os_interface
533+  						*/
534+  	 0000				  .extern cl_I2C_WriteMsg
535+  						
536+  						
537+  						/**
538+  						* @brief Create an I2C command word to be used in cl_I2C_ReadMsg,
539+  						* cl_I2C_WriteMsg, cl_I2C_Nonblocking_ReadMsg, cl_I2C_Nonblocking_WriteMsg
540+  						*
541+  						* @param[in] i2c_address (a0) the 7-bit address of the i2c device.
542+  						*
543+  						* @param[in] i2c_clock_divider (a1) divide the Cirrus DSP's core clock (HCLK/(8*(divider+1)) )
544+  						*
545+  						* @param[in] bytes_per_message (b0) count in bytes, for the payload.
546+  						*
547+  						* @return (x2) formatted IIC Command word
548+  						*        Bits  6:0  -- 7-bit Slave address: If the intended address is 0xA0, the seven bit address is 0x50.
549+  						*        Bits 19:8 -- Clock divider value
550+  						*        Bits 22:20 -- Bytes per message: NOTE: for 3, bytes 0x00YYYYYY are used. For 2, bytes 0x0000YYYY are used and for 1, bytes 0x000000YY are used.
551+  						*
552+  						* assembly programmers only: caller must set mr_sr=(4)
553+  						*
554+  						* <b>IMPORTANT: For CS48L2X, CS47L3X, use C platform library instead of DSP Library for I2C operations. </b>
555+  						*
556+  						* @ingroup os_interface
557+  						*/
558+  	 0000				  .extern cl_I2C_Command_Word
559+  						
560+  						/**
561+  						* @brief: function to send stop on the IIC line
562+  						* and reset the OS_IIC_Msg_Busy and Error status to 0
563+  						*
564+  						* @return none
565+  						*
566+  						* <b>IMPORTANT: For CS48L2X, CS47L3X, use C platform library instead of DSP Library for I2C operations. </b>
567+  						*
568+  						* @ingroup os_interface
569+  						*/
570+  	 0000				  .extern cl_I2C_Abort_Message
571+  						
572+  						/*=================================================================*/
573+  						
574+  						/**
575+  						 * @brief Clears the nm0-nm7 registers.
576+  						 *
577+  						 * Sets these registers to 0, and sets mr_sr=0x4, when called from C.
578+  						 *
579+  						 * @param (none)
580+  						 *
581+  						 * @return (none)
582+  						 *
583+  						 * modifies resources: nm0-nm7 (and sets mr_sr=4 when called from C)
584+  						 *
585+  						 * @ingroup os_interface
586+  						 */
587+  	 0000				  .extern cl_clearNM0_7
588+  						
589+  						/*=================================================================*/
590+  						
591+  						/** @def BRICK_SIZE
592+  						 * size of one block of audio data.
593+  						 * @ingroup os_interface
594+  						 */
595+  							.if !defined(BRICK_SIZE)
596+  	 0010				BRICK_SIZE .equ 16
597+  							.endif		
598+  						
599+  						
600+  						/** @def NUMBER_OF_IO_CHANNELS
601+  						 * number of internal PCM channels.
602+  						 * @ingroup os_interface
603+  						 */
604+  							.if !defined(MAX_HARDWARE_DSP_CHANNELS_FOR_ANY_CIRRUS_PLATFORM)
605+  	 0010				MAX_HARDWARE_DSP_CHANNELS_FOR_ANY_CIRRUS_PLATFORM .equ 16
606+  							.endif
607+  						
608+  						/** Input output buffers
609+  						 * a set of pointers to the current brick buffer, one per channel.
610+  						 * data size: 1
611+  						 * memory zone X
612+  						 * @ingroup os_interface
613+  						 */
614+  						
615+  	 0000					.extern ___X_BY_IOBUFFER_PTRS
616+  						
617+  						/** Variable that has input mode for all processing blocks.
618+  						 * Change mode if you add or remove channels (for the benefit of down-stream modules)
619+  						 * data size: 1
620+  						 * memory zone X
621+  						 * @ingroup os_interface
622+  						 */
623+  						
624+  	 0000					.extern ___X_VX_PPM_INPUTMODE
625+  						/** Variable that has input channels for all processing blocks.
626+  						 * Change mask if you add or remove channels (for the benefit of down-stream modules)
627+  						 * data size: 1
628+  						 * memory zone X
629+  						 * @ingroup os_interface
630+  						 */
631+  							
632+  	 0000					.extern ___X_VX_PPM_INPUT_CHANNELS
633+  						
634+  						
635+  						/** Variable that has output mode for all processing blocks.
636+  						 * Change mode if you add or remove channels (for the benefit of down-stream modules)
637+  						 * data size: 1
638+  						 * memory zone X
639+  						 * @ingroup os_interface
640+  						 */
641+  							
642+  	 0000					.extern ___X_VX_PPM_OUTPUTMODE
643+  						
644+  						/** Variable that has output channels mask for all processing blocks.
645+  						 * Change mask if you add or remove channels (for the benefit of down-stream modules)
646+  						 * data size: 1
647+  						 * memory zone X
648+  						 * @ingroup os_interface
649+  						 */
650+  						
651+  	 0000					.extern ___X_VX_PPM_OUTPUT_CHANNELS
652+  						/** Variable that indicates audio underflow in the DSP
653+  						 * data size: 1
654+  						 * memory zone X
655+  						 * @ingroup os_interface
656+  						 */
657+  												
658+  	 0000					.extern ___X_VX_UNDERFLOW
659+  						
660+  						
661+  						
662+  						
663+  						
664+  						
665+  						/** __X_VX_PPM_INPUT_CHANNELS and __X_VX_PPM_OUTPUT_CHANNELS are bitfield representations of the
666+  						 * Input and Output Modes. Valid_Channels is initially a copy of __X_VX_PPM_INPUT_CHANNELS, but
667+  						 * is modified by Modules as channels are added or removed. These variables are set by the OS
668+  						 * and exist only as part of the MPM/PPM Frame Data.
669+  						 *  __X_VX_PPM_VALID_CHANNELS specifies which of the 16 channels contain valid data and should be
670+  						 * operated on by a Module. Each bit in __X_VX_PPM_VALID_CHANNELS corresponds to a single channel,
671+  						 * with a 1 signifying valid data and a 0 signifying no data. __X_VX_PPM_VALID_CHANNELS must be
672+  						 * modified by a Module when it adds or removes channels. Consider a virtualizer that transforms 5.1
673+  						 * channels into a single stereo pair. Upon entering the virtualizer Module, __X_VX_PPM_VALID_CHANNELS
674+  						 * might contain the value 0x009F (10011111b): a total of 6 bits set to one corresponding to the standard
675+  						 * L, C, R, Ls, Rs and LFE channels. The Module performs the virtualization, sets __X_VX_PPM_VALID_CHANNELS
676+  						 * to 0x0005 (00000101b: two bits corresponding to L and R) and clears the 16-samples in the C, Ls, Rs,
677+  						 * and LFE channel buffers. Subsequent Modules would then operate only on the new set of valid channels.
678+  						 */
679+  						
680+  						/** Variable that has input channels mask for the first processing block (decoder).
681+  						 * This variable is controlled by OS and shoild not be changed.
682+  						 * @ingroup os_interface
683+  						 */
684+  						
685+  						/** Bit map used to determine what channels are valid coming in current processing block.
686+  						 * Change this map if you add or remove channels (for the benefit of down-stream modules)
687+  						 * @ingroup os_interface
688+  						 */
689+  						
690+  	 0000					.extern ___X_VX_PPM_VALID_CHANNELS
691+  						
692+  						
693+  						/** Current sample rate
694+  						 * data size: 1
695+  						 * memory zone X
696+  						
697+  						 * @ingroup os_interface
698+  						 */
699+  	 0000				 .extern ___X_VX_PPM_SAMPLERATE
700+  							
701+  						/** @brief Flag to initiate malloc operations.
702+  						 * Set X_VX_NEXTFRM_REINIT_REQ to a non-zero value to initiate a fresh malloc of the
703+  						 * entire system at the next frame transition. Setting X_VX_NEXTFRM_REINIT_REQ triggers a
704+  						 * premalloc + postmalloc at the next frame transition. Setting of this flag is not required for
705+  						 * the malloc on startup. A module can set the X_VX_NEXTFRM_REINIT_REQ at any time.
706+  						 *
707+  						 * Notes and typical usage scenario:
708+  						 * Typically every module's post-kick start routine will set X_VX_NextFrm_Reinit_Req to 1
709+  						 * and a module specific malloc done flag to 0.
710+  						 * Post-kick routines are called from the OS once each time when the control goes
711+  						 * to App_Restart before dropping down in a continuous background call loop.
712+  						 *
713+  						 * The OS does the following, in order, when responding to a X_VX_NEXTFRM_REINIT_REQ request:
714+  						 *  call pre-malloc entry point for each module
715+  						 *  do mallocations
716+  						 *  call post-malloc entry point for each module
717+  						 *  clear X_VX_NextFrm_Renint_Req variable (set it to 0)
718+  						 *
719+  						 * An individual module can set X_VX_NextFrm_Reinit_Req at any point (e.g. block,background,frame) if the
720+  						 * module detects a change in parameters that need to be addressed with change in mallocations.
721+  						 * OS will only act upon the request at the next frame boundary.
722+  						 *
723+  						 * Related notes:
724+  						 * a reinit request will trigger pre and post malloc, but not postkick.  Postkick is called when a
725+  						 * stream level change occurs, and soft reset is required, as such, modules must be careful that all
726+  						 * the necessary requests for heap are done in premalloc and not in postkick
727+  						 *
728+  						 * @ingroup os_interface
729+  						 */
730+  	 0000					.extern ___X_VX_NEXTFRM_REINIT_REQ
731+  						
732+  						/** Flag to detect heap reinitialization.
733+  						 * Check this flag for a non-zero value, which indicates that re-malloc has occured.
734+  						 * module.
735+  						 * data size: 1
736+  						 * memory zone X
737+  						 * @ingroup os_vars
738+  						 */
739+  						
740+  	 0000					.extern ___X_VX_REINIT
741+  						
742+  						/** Number of audio samples presented per brick (block) entry point to modules running in the post processing modules (PPM) overlay.
743+  						 * data size: 1
744+  						 * memory zone Y
745+  						 * @ingroup os_vars
746+  						 */
747+  	 0000					.extern	___X_VY_BRICK_SIZE
748+  						
749+  						/** @defgroup tempbufs Temporary Buffers
750+  						* Temporary buffers which can be used within block routines.
751+  						*
752+  						*  Contents of temp buffers are not preserved between block routine calls.
753+  						*
754+  						*  Note that X_BL_* buffers are the same data space identified by
755+  						*           * X_BX_* and
756+  						*           * X_BY_* buffers.
757+  						*
758+  						*  @ingroup os_interface
759+  						*/
760+  						
761+  						
762+  						/** a temporary buffer in XY memory of size 256.
763+  						 *  Available for the duration of one foreground entry point.
764+  						 * @ingroup tempbufs
765+  						 */
766+  	 0000					.extern ___X_BL_TEMPBUFF
767+  						/** a temporary buffer in Y memory of size 256. 
768+  						 *  Available for the duration of one foreground entry point.
769+  						 * @ingroup tempbufs
770+  						 */
771+  	 0000					.extern ___X_BY_TEMPBUFF
772+  						/** a temporary buffer in X memory of size 256. 
773+  						 *  Available for the duration of one foreground entry point.
774+  						 * @ingroup tempbufs
775+  						 */
776+  	 0000					.extern ___X_BX_TEMPBUFF
777+  						
778+  						/** a temporary buffer of size 16 (temp buffer is number 0 of buffers[1..15]) in XY memory.
779+  						 *  Available for the duration of one foreground entry point.
780+  						 * @ingroup tempbufs
781+  						 */
782+  	 0000				    .extern ___X_BL_TEMPBUFF0
783+  						
784+  						/** a temporary buffer of size 16 (temp buffer is number 0 of buffers[0..15]) in Y memory.
785+  						 *  Available for the duration of one foreground entry point.
786+  						 * @ingroup tempbufs
787+  						 */
788+  	 0000				    .extern ___X_BY_TEMPBUFF0
789+  						/** a temporary buffer of size 16 (temp buffer is number 0 of buffers[0..15]) in X memory.
790+  						 *  Available for the duration of one foreground entry point.
791+  						 * @ingroup tempbufs
792+  						 */
793+  	 0000				    .extern ___X_BX_TEMPBUFF0
794+  						
795+  						/** a temporary buffer of size 16 (temp buffer is number 1 of buffers[1..15]) in XY memory.
796+  						 *  Available for the duration of one foreground entry point.
797+  						 * @ingroup tempbufs
798+  						 */
799+  	 0000				    .extern ___X_BL_TEMPBUFF1
800+  						/** a temporary buffer of size 16 (temp buffer is number 1 of buffers[0..15]) in Y memory.
801+  						 *  Available for the duration of one foreground entry point.
802+  						 * @ingroup tempbufs
803+  						 */
804+  	 0000				    .extern ___X_BY_TEMPBUFF1
805+  						/** a temporary buffer of size 16 (temp buffer is number 1 of buffers[0..15]) in X memory.
806+  						 *  Available for the duration of one foreground entry point.
807+  						 * @ingroup tempbufs
808+  						 */
809+  	 0000				    .extern ___X_BX_TEMPBUFF1
810+  						
811+  						/** a temporary buffer of size 16 (temp buffer is number 2 of buffers[1..15]) in XY memory.
812+  						 *  Available for the duration of one foreground entry point.
813+  						 * @ingroup tempbufs
814+  						 */
815+  	 0000				    .extern ___X_BL_TEMPBUFF2
816+  						/** a temporary buffer of size 16 (temp buffer is number 2 of buffers[0..15]) in Y memory.
817+  						 *  Available for the duration of one foreground entry point.
818+  						 * @ingroup tempbufs
819+  						 */
820+  	 0000				    .extern ___X_BY_TEMPBUFF2
821+  						/** a temporary buffer of size 16 (temp buffer is number 2 of buffers[0..15]) in X memory.
822+  						 *  Available for the duration of one foreground entry point.
823+  						 * @ingroup tempbufs
824+  						 */
825+  	 0000				    .extern ___X_BX_TEMPBUFF2
826+  						
827+  						/** a temporary buffer of size 16 (temp buffer is number 3 of buffers[1..15]) in XY memory.
828+  						 *  Available for the duration of one foreground entry point.
829+  						 * @ingroup tempbufs
830+  						 */
831+  	 0000				    .extern ___X_BL_TEMPBUFF3
832+  						/** a temporary buffer of size 16 (temp buffer is number 3 of buffers[0..15]) in Y memory.
833+  						 *  Available for the duration of one foreground entry point.
834+  						 * @ingroup tempbufs
835+  						 */
836+  	 0000				    .extern ___X_BY_TEMPBUFF3
837+  						/** a temporary buffer of size 16 (temp buffer is number 3 of buffers[0..15]) in X memory.
838+  						 *  Available for the duration of one foreground entry point.
839+  						 * @ingroup tempbufs
840+  						 */
841+  	 0000				    .extern ___X_BX_TEMPBUFF3
842+  						
843+  						/** a temporary buffer of size 16 (temp buffer is number 4 of buffers[1..15]) in XY memory.
844+  						 *  Available for the duration of one foreground entry point.
845+  						 * @ingroup tempbufs
846+  						 */
847+  	 0000				    .extern ___X_BL_TEMPBUFF4
848+  						/** a temporary buffer of size 16 (temp buffer is number 4 of buffers[0..15]) in Y memory.
849+  						 *  Available for the duration of one foreground entry point.
850+  						 * @ingroup tempbufs
851+  						 */
852+  	 0000				    .extern ___X_BY_TEMPBUFF4
853+  						/** a temporary buffer of size 16 (temp buffer is number 4 of buffers[0..15]) in X memory.
854+  						 *  Available for the duration of one foreground entry point.
855+  						 * @ingroup tempbufs
856+  						 */
857+  	 0000				    .extern ___X_BX_TEMPBUFF4
858+  						
859+  						/** a temporary buffer of size 16 (temp buffer is number 5 of buffers[1..15]) in XY memory.
860+  						 *  Available for the duration of one foreground entry point.
861+  						 * @ingroup tempbufs
862+  						 */
863+  	 0000				    .extern ___X_BL_TEMPBUFF5
864+  						/** a temporary buffer of size 16 (temp buffer is number 5 of buffers[0..15]) in Y memory.
865+  						 *  Available for the duration of one foreground entry point.
866+  						 * @ingroup tempbufs
867+  						 */
868+  	 0000				    .extern ___X_BY_TEMPBUFF5
869+  						/** a temporary buffer of size 16 (temp buffer is number 5 of buffers[0..15]) in X memory.
870+  						 *  Available for the duration of one foreground entry point.
871+  						 * @ingroup tempbufs
872+  						 */
873+  	 0000				    .extern ___X_BX_TEMPBUFF5
874+  						
875+  						/** a temporary buffer of size 16 (temp buffer is number 6 of buffers[1..15]) in XY memory.
876+  						 *  Available for the duration of one foreground entry point.
877+  						 * @ingroup tempbufs
878+  						 */
879+  						
880+  	 0000				    .extern ___X_BL_TEMPBUFF6
881+  						/** a temporary buffer of size 16 (temp buffer is number 6 of buffers[0..15]) in Y memory.
882+  						 *  Available for the duration of one foreground entry point.
883+  						 * @ingroup tempbufs
884+  						 */
885+  	 0000				    .extern ___X_BY_TEMPBUFF6
886+  						/** a temporary buffer of size 16 (temp buffer is number 6 of buffers[0..15]) in X memory.
887+  						 *  Available for the duration of one foreground entry point.
888+  						 * @ingroup tempbufs
889+  						 */
890+  	 0000				    .extern ___X_BX_TEMPBUFF6
891+  						
892+  						/** a temporary buffer of size 16 (temp buffer is number 7 of buffers[1..15]) in XY memory.
893+  						 *  Available for the duration of one foreground entry point.
894+  						 * @ingroup tempbufs
895+  						 */
896+  	 0000				    .extern __X_BL_TEMPBUFF7
897+  						/** a temporary buffer of size 16 (temp buffer is number 7 of buffers[0..15]) in Y memory.
898+  						 *  Available for the duration of one foreground entry point.
899+  						 * @ingroup tempbufs
900+  						 */
901+  	 0000				    .extern ___X_BY_TEMPBUFF7
902+  						/** a temporary buffer of size 16 (temp buffer is number 7 of buffers[0..15]) in X memory.
903+  						 *  Available for the duration of one foreground entry point.
904+  						 * @ingroup tempbufs
905+  						 */
906+  	 0000				    .extern ___X_BX_TEMPBUFF7
907+  						
908+  						/** a temporary buffer of size 16 (temp buffer is number 8 of buffers[1..15]) in XY memory.
909+  						 *  Available for the duration of one foreground entry point.
910+  						 * @ingroup tempbufs
911+  						 */
912+  	 0000				    .extern ___X_BL_TEMPBUFF8
913+  						/** a temporary buffer of size 16 (temp buffer is number 8 of buffers[0..15]) in Y memory.
914+  						 *  Available for the duration of one foreground entry point.
915+  						 * @ingroup tempbufs
916+  						 */
917+  	 0000				    .extern ___X_BY_TEMPBUFF8
918+  						/** a temporary buffer of size 16 (temp buffer is number 8 of buffers[0..15]) in X memory.
919+  						 *  Available for the duration of one foreground entry point.
920+  						 * @ingroup tempbufs
921+  						 */
922+  	 0000				    .extern ___X_BX_TEMPBUFF8
923+  						
924+  						/** a temporary buffer of size 16 (temp buffer is number 9 of buffers[1..15]) in XY memory.
925+  						 *  Available for the duration of one foreground entry point.
926+  						 * @ingroup tempbufs
927+  						 */
928+  	 0000				    .extern ___X_BL_TEMPBUFF9
929+  						/** a temporary buffer of size 16 (temp buffer is number 9 of buffers[0..15]) in Y memory.
930+  						 *  Available for the duration of one foreground entry point.
931+  						 * @ingroup tempbufs
932+  						 */
933+  	 0000				    .extern ___X_BY_TEMPBUFF9
934+  						/** a temporary buffer of size 16 (temp buffer is number 9 of buffers[0..15]) in X memory.
935+  						 *  Available for the duration of one foreground entry point.
936+  						 * @ingroup tempbufs
937+  						 */
938+  	 0000				    .extern ___X_BX_TEMPBUFF9
939+  						
940+  						/** a temporary buffer of size 16 (temp buffer is number 10 of buffers[1..15]) in XY memory.
941+  						 *  Available for the duration of one foreground entry point.
942+  						 * @ingroup tempbufs
943+  						 */
944+  	 0000				    .extern ___X_BL_TEMPBUFF10
945+  						/** a temporary buffer of size 16 (temp buffer is number 10 of buffers[0..15]) in Y memory.
946+  						 *  Available for the duration of one foreground entry point.
947+  						 * @ingroup tempbufs
948+  						 */
949+  	 0000				    .extern ___X_BY_TEMPBUFF10
950+  						/** a temporary buffer of size 16 (temp buffer is number 10 of buffers[0..15]) in X memory.
951+  						 *  Available for the duration of one foreground entry point.
952+  						 * @ingroup tempbufs
953+  						 */
954+  	 0000				    .extern ___X_BX_TEMPBUFF10
955+  						
956+  						/** a temporary buffer of size 16 (temp buffer is number 11 of buffers[1..15]) in XY memory.
957+  						 *  Available for the duration of one foreground entry point.
958+  						 * @ingroup tempbufs
959+  						 */
960+  	 0000				    .extern ___X_BL_TEMPBUFF11
961+  						/** a temporary buffer of size 16 (temp buffer is number 11 of buffers[0..15]) in Y memory.
962+  						 *  Available for the duration of one foreground entry point.
963+  						 * @ingroup tempbufs
964+  						 */
965+  	 0000				    .extern ___X_BY_TEMPBUFF11
966+  						/** a temporary buffer of size 16 (temp buffer is number 11 of buffers[0..15]) in X memory.
967+  						 *  Available for the duration of one foreground entry point.
968+  						 * @ingroup tempbufs
969+  						 */
970+  	 0000				    .extern ___X_BX_TEMPBUFF11
971+  						
972+  						/** a temporary buffer of size 16 (temp buffer is number 12 of buffers[1..15]) in XY memory.
973+  						 *  Available for the duration of one foreground entry point.
974+  						 * @ingroup tempbufs
975+  						 */
976+  	 0000				    .extern ___X_BL_TEMPBUFF12
977+  						/** a temporary buffer of size 16 (temp buffer is number 12 of buffers[0..15]) in Y memory.
978+  						 *  Available for the duration of one foreground entry point.
979+  						 * @ingroup tempbufs
980+  						 */
981+  	 0000				    .extern ___X_BY_TEMPBUFF12
982+  						/** a temporary buffer of size 16 (temp buffer is number 12 of buffers[0..15]) in X memory.
983+  						 *  Available for the duration of one foreground entry point.
984+  						 * @ingroup tempbufs
985+  						 */
986+  	 0000				    .extern ___X_BX_TEMPBUFF12
987+  						
988+  						/** a temporary buffer of size 16 (temp buffer is number 13 of buffers[1..15]) in XY memory.
989+  						 *  Available for the duration of one foreground entry point.
990+  						 * @ingroup tempbufs
991+  						 */
992+  	 0000				    .extern ___X_BL_TEMPBUFF13
993+  						/** a temporary buffer of size 16 (temp buffer is number 13 of buffers[0..15]) in Y memory.
994+  						 *  Available for the duration of one foreground entry point.
995+  						 * @ingroup tempbufs
996+  						 */
997+  	 0000				    .extern ___X_BY_TEMPBUFF13
998+  						/** a temporary buffer of size 16 (temp buffer is number 13 of buffers[0..15]) in X memory.
999+  						 *  Available for the duration of one foreground entry point.
1000+ 						 * @ingroup tempbufs
1001+ 						 */
1002+ 	 0000				    .extern ___X_BX_TEMPBUFF13
1003+ 						
1004+ 						/** a temporary buffer of size 16 (temp buffer is number 14 of buffers[1..15]) in XY memory.
1005+ 						 *  Available for the duration of one foreground entry point.
1006+ 						 * @ingroup tempbufs
1007+ 						 */
1008+ 	 0000				    .extern ___X_BL_TEMPBUFF14
1009+ 						/** a temporary buffer of size 16 (temp buffer is number 14 of buffers[0..15]) in Y memory.
1010+ 						 *  Available for the duration of one foreground entry point.
1011+ 						 * @ingroup tempbufs
1012+ 						 */
1013+ 	 0000				    .extern ___X_BY_TEMPBUFF14
1014+ 						/** a temporary buffer of size 16 (temp buffer is number 14 of buffers[0..15]) in X memory.
1015+ 						 *  Available for the duration of one foreground entry point.
1016+ 						 * @ingroup tempbufs
1017+ 						 */
1018+ 	 0000				    .extern ___X_BX_TEMPBUFF14
1019+ 						
1020+ 						/** a temporary buffer of size 16 (temp buffer is number 15 of buffers[1..15]) in XY memory.
1021+ 						 *  Available for the duration of one foreground entry point.
1022+ 						 * @ingroup tempbufs
1023+ 						 */
1024+ 	 0000					.extern ___X_BL_TEMPBUFF15
1025+ 						/** a temporary buffer of size 16 (temp buffer is number 15 of buffers[0..15]) in Y memory.
1026+ 						 *  Available for the duration of one foreground entry point.
1027+ 						 * @ingroup tempbufs
1028+ 						 */
1029+ 	 0000					.extern ___X_BY_TEMPBUFF15
1030+ 						/** a temporary buffer of size 16 (temp buffer is number 15 of buffers[0..15]) in X memory.
1031+ 						 *  Available for the duration of one foreground entry point.
1032+ 						 * @ingroup tempbufs
1033+ 						 */
1034+ 	 0000					.extern ___X_BX_TEMPBUFF15
1035+ 						
1036+ 						/*======================================================================*/
1037+ 							
1038+ 						  /**
1039+ 						  * @brief Check the busy state of the I2C bus.
1040+ 						  *
1041+ 						  * @return (a0) the busy state of the i2c bus. 0==not busy. 1==busy.
1042+ 						  *
1043+ 						  *  @ingroup os_interface
1044+ 						  */
1045+ 	 0000				  .extern cl_get_i2c_msg_busy
1046+ 						
1047+ 						  /**
1048+ 						  * @brief Check the error code for the most recent I2C command issued.
1049+ 						  *
1050+ 						  * @return (a0) 0x0000 0000     No Error
1051+ 						  *              0x0000 0001     Illegal IIC Transaction issued. Trying to do IIC Write / Read
1052+ 						  *                                 when SCP is not configured for IIC master and not coming from
1053+ 						  *                                 master boot
1054+ 						  *              0x0000 0002     IIC NO ACK Error
1055+ 						  *              0x0000 0004     Time-out error (in case of blocking IIC calls)
1056+ 						  *
1057+ 						  *  @ingroup os_interface
1058+ 						  */
1059+ 	 0000				  .extern cl_get_i2c_msg_error
1060+ 						
1061+ 						  /**
1062+ 						  * @brief Check the I2C pending writes count
1063+ 						  *
1064+ 						  * @return (a0) I2C Message pending reads count
1065+ 						  *
1066+ 						  *  @ingroup os_interface
1067+ 						  */
1068+ 	 0000				  .extern cl_get_i2c_msg_pending_writes
1069+ 						
1070+ 						  /**
1071+ 						  * @brief Check the I2C pending reads count
1072+ 						  *
1073+ 						  * @return (a0) I2C Message pending reads count
1074+ 						  *
1075+ 						  *  @ingroup os_interface
1076+ 						  */
1077+ 	 0000				  .extern cl_get_i2c_msg_pending_reads
1078+ 						
1079+ 						  /**
1080+ 						  * @brief Check the I2C Message FIFO pointer
1081+ 						  *
1082+ 						  * @return (a0) the I2C Message FIFO pointer
1083+ 						  *
1084+ 						  * assembly programmers only: Modifies register a0, and the "a" status register.
1085+ 						  *
1086+ 						  *  @ingroup os_interface
1087+ 						  */
1088+ 	 0000				  .extern cl_get_i2c_msg_fifo_ptr
1089+ 						
1090+ 						  /**
1091+ 						  * @brief Check the I2C message current command word
1092+ 						  *
1093+ 						  * @return (a0) the I2C message current command word
1094+ 						  *
1095+ 						  *  @ingroup os_interface
1096+ 						  */
1097+ 	 0000				  .extern cl_get_i2c_cmd_word
1098+ 						
1099+ 						
1100+ 						  .endif
1101+  >> end of include file: C:/CirrusDSP/include/dsplib/os_asm.h
1101+  >> continuing with file: D:/nastava/aadsp2/2016-2017/Vezbe/Vezba7/postavka/Zadatak2/multitapEcho_framework/src/multitapEcho.a
15    						
16    	 0000				_multitapEcho_a_
17    						
18    						#	User header files:
19    						#-------------------------------------------------------------------------------
20    							.include ("multitapEcho.h")
20     >> open include file: D:/nastava/aadsp2/2016-2017/Vezbe/Vezba7/postavka/Zadatak2/multitapEcho_framework/inc/multitapEcho.h
1+    						###############################################################################
2+    						##*/**
3+    						##** @file multitapEcho.h
4+    						##**
5+    						##** Module:
6+    						##** Description:
7+    						##** $Source: $
8+    						##** $Revision: $
9+    						##** $Date: $
10+   						##** $Author: $
11+   						##**
12+   						##**/
13+   						################################################################################
14+   						  .list -cond
15+   						  .if !defined(_multitapEcho_h_)
16+   	 0000				_multitapEcho_h_
17+   						
18+   						
19+   						#	Public/Extern Macro:
20+   						#-----------------------------------------------
21+   							.if defined(_multitapEcho_a_)
22+   							   .macro
23+   								_multitapEcho_import_export:		%var
24+   								.public %var
25+   								.endm
26+   							.else
31+   							.endif
32+   						#-----------------------------------------------
33+   						
34+   						#	INCLUDES:
35+   						################################################################################
36+   							.if defined(_multitapEcho_a_)
37+   								#TODO: Insert aditional includes here: these will only be included into multitapEcho.a
38+   							.include	("mtechoGlobalConsts.h")
38+    >> open include file: D:/nastava/aadsp2/2016-2017/Vezbe/Vezba7/postavka/Zadatak2/multitapEcho_framework/inc/mtechoGlobalConsts.h
1+    						################################################################################
2+    						##*/**
3+    						##** @file bpcmGlobalConsts.h
4+    						##**
5+    						##** Module:
6+    						##** Description:
7+    						##** $Source: $
8+    						##** $Revision: $
9+    						##** $Date: $
10+   						##** $Author: $
11+   						##**
12+   						##**/
13+   						################################################################################
14+   						  .list -cond
15+   						  .if !defined(_mtechoGlobalConsts_h_)
16+   	 0000				_mtechoGlobalConsts_h_
17+   						
18+   						
19+   						#	Public Constants
20+   						#-------------------------------------------------------------------------------
21+   						#TODO: Insert constant definitions: 
22+   	 0004				N_TAP 									.equ 4
23+   	 1000				ECHO_MAX_LENGTH			 				.equ 4096
24+   						#...
25+   						################################################################################
26+   						  .endif
27+    >> end of include file: D:/nastava/aadsp2/2016-2017/Vezbe/Vezba7/postavka/Zadatak2/multitapEcho_framework/inc/mtechoGlobalConsts.h
27+    >> continuing with file: D:/nastava/aadsp2/2016-2017/Vezbe/Vezba7/postavka/Zadatak2/multitapEcho_framework/inc/multitapEcho.h
39+   							.include	("mtechoDataVars.h")
39+    >> open include file: D:/nastava/aadsp2/2016-2017/Vezbe/Vezba7/postavka/Zadatak2/multitapEcho_framework/inc/mtechoDataVars.h
1+    						################################################################################
2+    						##*/**
3+    						##** @file mtechoDataVars.h
4+    						##**
5+    						##** Module:
6+    						##** Description:
7+    						##** $Source: $
8+    						##** $Revision: $
9+    						##** $Date: $
10+   						##** $Author: $
11+   						##**
12+   						##**/
13+   						################################################################################
14+   						  .list -cond
15+   						  .if !defined(_mtechoDataVars_h_)
16+   	 0000				_mtechoDataVars_h_
17+   						
18+   						
19+   						#	Public/Extern Macro:
20+   						#-----------------------------------------------
21+   							.if defined(_mtechoDataVars_a_)
26+   							.else
27+   								.macro
28+   								_mtechoDataVars_import_export:		%var
29+   								.extern %var
30+   								.endm
31+   							.endif
32+   						#-----------------------------------------------
33+   						#	INCLUDES:
34+   						################################################################################
35+   							.if defined(_mtechoDataVars_a_)
39+   							.endif
40+   						################################################################################
41+   						
42+   						# STRUCTURE DEFINITIONS:
43+   						################################################################################
44+   						#TO_DO: Copy state structure definition
45+   						S_echoState_0	.struct
46+   						_pEchoBuff	.dw (0x0)
47+   						_bufferLength	.dw (0x0)
48+   						_writePointer	.dw (0x0)
49+   						_readPointer	.dw (0x0)
50+   							.dw (0x0)
51+   							.dw (0x0)
52+   							.dw (0x0)
53+   						_delay	.dw (0x0)
54+   							.dw (0x0)
55+   							.dw (0x0)
56+   							.dw (0x0)
57+   						_n_tap	.dw (0x0)
58+   							.endstruct
59+   						################################################################################
60+   						
61+   						
62+   						#	PUBLIC/EXTERN:
63+   						################################################################################
64+   						
65+   								#TODO: Type public/extern definitions here: function_or_variable visible to others
66+   								_mtechoDataVars_import_export:		_echo_buffer
66+    >> start of macro: _mtechoDataVars_import_export:
1+    	 0000						.extern _echo_buffer
2+     >> end of macro: _mtechoDataVars_import_export:
67+   								_mtechoDataVars_import_export:		_echoState
67+    >> start of macro: _mtechoDataVars_import_export:
1+    	 0000						.extern _echoState
2+     >> end of macro: _mtechoDataVars_import_export:
68+   								_mtechoDataVars_import_export:	 	_initial_delay
68+    >> start of macro: _mtechoDataVars_import_export:
1+    	 0000						.extern _initial_delay
2+     >> end of macro: _mtechoDataVars_import_export:
69+   								_mtechoDataVars_import_export:	 	_initial_gain
69+    >> start of macro: _mtechoDataVars_import_export:
1+    	 0000						.extern _initial_gain
2+     >> end of macro: _mtechoDataVars_import_export:
70+   								_mtechoDataVars_import_export:	 	_initial_input_gain
70+    >> start of macro: _mtechoDataVars_import_export:
1+    	 0000						.extern _initial_input_gain
2+     >> end of macro: _mtechoDataVars_import_export:
71+   								
72+   						
73+   						################################################################################
74+   						  .endif
75+    >> end of include file: D:/nastava/aadsp2/2016-2017/Vezbe/Vezba7/postavka/Zadatak2/multitapEcho_framework/inc/mtechoDataVars.h
75+    >> continuing with file: D:/nastava/aadsp2/2016-2017/Vezbe/Vezba7/postavka/Zadatak2/multitapEcho_framework/inc/multitapEcho.h
40+   							.endif
41+   						################################################################################
42+   						
43+   						
44+   						#	PUBLIC/EXTERN:
45+   						################################################################################
46+   						
47+   								#TODO: Type public/extern definitions here: function_or_variable visible to others
48+   						#		_multitapEcho_import_export:		function_or_variable_name
49+   								_multitapEcho_import_export:		X_S_multitapEchoInit
49+    >> start of macro: _multitapEcho_import_export:
1+    	 0000						.public X_S_multitapEchoInit
2+     >> end of macro: _multitapEcho_import_export:
50+   								_multitapEcho_import_export:		X_S_multitapEcho
50+    >> start of macro: _multitapEcho_import_export:
1+    	 0000						.public X_S_multitapEcho
2+     >> end of macro: _multitapEcho_import_export:
51+   						
52+   						################################################################################
53+   						  .endif
54+    >> end of include file: D:/nastava/aadsp2/2016-2017/Vezbe/Vezba7/postavka/Zadatak2/multitapEcho_framework/inc/multitapEcho.h
54+    >> continuing with file: D:/nastava/aadsp2/2016-2017/Vezbe/Vezba7/postavka/Zadatak2/multitapEcho_framework/src/multitapEcho.a
21    						 
22    						 .code_ovly
22     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
23    						
24    						################################################################################
25    						##*/**
26    						##** @Author
27    						##** @Date		07.03.2017
28    						##**
29    						##** Function:
30    						##** X_S_multitapEchoInit
31    						##**
32    						##** @param		-
33    						##**
34    						##** @return	-
35    						##**
36    						##** Trashes:	-
37    						##** Comment:	Initialize processing
38    						##**
39    						##** E-mail:
40    						##**/
41    						################################################################################
42    	 0000				X_S_multitapEchoInit
43    						
44    							#TODO: add multitapEcho init function body	
45    	 0000	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 66, 66 | 
46    	 0001	 B3540017		xmem[i7] = i3; i7 += 1			# LN: 66, 66 | 
47    	 0002	 BA540007		xmem[i7] = i6			# LN: 66 | 
48    	 0003	 A0050000		i0 = (0) + (_echo_buffer + 0)			# LN: 69 | 
49    	 0004	 A1050000		i1 = (0) + (_echoState + 7)			# LN: 71 | 
50    	 0005	 A4050000		i4 = (0) + (_initial_delay + 0)			# LN: 72 | 
51    	 0006	 A5050000		i5 = (0) + (_echoState + 12)			# LN: 73 | 
52    	 0007	 A2050000		i2 = (0) + (_initial_gain + 0)			# LN: 74 | 
53    	 0008	 B34A1000		i3 = (0x1000)			# LN: 78 | 
54    	 0009	 A6050000		i6 = (0) + (_echoState + 3)			# LN: 75 | 
55    	 000A	 8301000C		do (i3), label_end_94			# LN: 78 | 
56    	 000B				label_begin_94:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
57    	 000B	 00004DC0		a0 = 0			# LN: 80 | 
58    	 000C				label_end_94:			# LN: 78 | CYCLE: 1 | RULES: ()
59    	 000C	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 80, 80 | 
60    	 000D				for_end_0:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
61    	 000D	 A0050000		i0 = (0) + (_echo_buffer + 0)			# LN: 83 | 
62    	 000E	 B0440000		xmem[_echoState + 0] = i0			# LN: 83 | 
63    	 000F	 884A1000		uhalfword(a0) = (0x1000)			# LN: 84 | 
64    	 0010	 98440000		xmem[_echoState + 1] = a0h			# LN: 84 | 
65    	 0011	 B0040000		i0 = xmem[_echoState + 0]			# LN: 85 | 
66    	 0012	 887A4000		a0 = (0x4000)			# LN: 86 | 
67    	 0013	 80051000		i0 = i0 + (0x1000)			# LN: 85 | 
68    	 0014	 02107FFF		i0 -= 1			# LN: 85 | 
69    	 0015	 B0440000		xmem[_echoState + 2] = i0			# LN: 85 | 
70    	 0016	 98440000		xmem[_echoState + 11] = a0h			# LN: 86 | 
71    	 0017	 884A0004		uhalfword(a0) = (0x4)			# LN: 87 | 
72    	 0018	 98440000		xmem[_echoState + 16] = a0h			# LN: 87 | 
73    	 0019	 80400022		do (0x4), label_end_95			# LN: 89 | 
74    	 001A				label_begin_95:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
75    	 001A	 88140004		a0 = xmem[i4]			# LN: 91 | 
76    	 001B	 894A0000		uhalfword(a1) = (_echo_buffer + 4095)			# LN: 91 | 
77    	 001C	 000044C0		a0 = a1 - a0			# LN: 91 | 
78    	 001D	 98090030		AnyReg(i0, a0h)			# LN: 91 | 
79    	 001E	 B0540016		xmem[i6] = i0; i6 += 1			# LN: 91, 91 | 
80    	 001F	 88140014		a0 = xmem[i4]; i4 += 1			# LN: 92, 92 | 
81    	 0020	 98540011		xmem[i1] = a0h; i1 += 1			# LN: 92, 92 | 
82    	 0021	 88140012		a0 = xmem[i2]; i2 += 1			# LN: 93, 93 | 
83    	 0022				label_end_95:			# LN: 89 | CYCLE: 8 | RULES: ()
84    	 0022	 98540015		xmem[i5] = a0h; i5 += 1			# LN: 93, 93 | 
85    	 0023				for_end_1:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
86    	 0023	 BA140027		i6 = xmem[i7]; i7 -= 1			# LN: 95, 95 | 
87    	 0024	 B3140027		i3 = xmem[i7]; i7 -= 1			# LN: 95, 95 | 
88    	 0025	 B2140007		i2 = xmem[i7]			# LN: 95 | 
89    						
90    						#%X_S_multitapEchoInit
91    						#-------------------------------------------------------------------------------
92    	 0026	 81880000	  ret
93    						
94    						
95    						################################################################################
96    						##*/**
97    						##** @Author
98    						##** @Date		07.03.2017
99    						##**
100   						##** Function:
101   						##** X_S_multitapEcho
102   						##**
103   						##** @param		-
104   						##**            
105   						##** @return    -
106   						##**            -
107   						##**
108   						##** Trashes:	-
109   						##** Comment:	multitapEcho
110   						##**
111   						##** E-mail:
112   						##**/
113   						################################################################################
114   	 0027				X_S_multitapEcho
115   						
116   						#TODO: add multitapEcho function body
117   	 0027	 B2540017		xmem[i7] = i2; i7 += 1			# LN: 113, 113 | 
118   	 0028	 B3540017		xmem[i7] = i3; i7 += 1			# LN: 113, 113 | 
119   	 0029	 B8040000		i4 = xmem[_echoState + 2]			# LN: 116 | 
120   	 002A	 8100003E		do (0x10), label_end_93			# LN: 118 | 
121   	 002B				label_begin_93:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
122   	 002B	 80940000		x0 = ymem[i0]			# LN: 120 | 
123   	 002C	 81040000		x1 = xmem[_echoState + 11]			# LN: 120 | 
124   	 002D	 A5050000		i5 = (0) + (_echoState + 12)			# LN: 121 | 
125   	 002E	 A2050000		i2 = (0) + (_echoState + 3)			# LN: 122 | 
126   	 002F	 28482081		a0 = ymem[i0]; i0 += 1; a1 = x0 * x1			# LN: 124, 124, 120 | 
127   	 0030	 98540004		xmem[i4] = a0h			# LN: 124 | 
128   	 0031	 BC4AB001		nm4 = (0xb001)			# LN: -1 | 
129   	 0032	 88040000		a0 = xmem[_echoState + 16]			# LN: 127 | 
130   	 0033	 021C7FFF		i4 += n			# LN: 125 | 
131   	 0034	 98090033		AnyReg(i3, a0h)			# LN: 127 | 
132   	 0035	 BC4A0000		nm4 = (0x0)			# LN: -1 | 
133   	 0036	 8301003D		do (i3), label_end_92			# LN: 127 | 
134   	 0037				label_begin_92:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
135   	 0037	 B3140002		i3 = xmem[i2]			# LN: 129 | 
136   	 0038	 80140015		x0 = xmem[i5]; i5 += 1			# LN: 130, 130 | 
137   	 0039	 B74AB001		nm3 = (0xb001)			# LN: -1 | 
138   	 003A	 81140003		x1 = xmem[i3]			# LN: 130 | 
139   	 003B	 021B2089		i3 += n; a1 += x0 * x1			# LN: 131, 130 | 
140   	 003C	 B74A0000		nm3 = (0x0)			# LN: -1 | 
141   	 003D				label_end_92:			# LN: 127 | CYCLE: 6 | RULES: ()
142   	 003D	 B3540012		xmem[i2] = i3; i2 += 1			# LN: 131, 132 | 
143   	 003E				for_end_3:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
144   	 003E				label_end_93:			# LN: 118 | CYCLE: 0 | RULES: ()
145   	 003E	 89D40011		ymem[i1] = a1; i1 += 1			# LN: 135, 135 | 
146   	 003F				for_end_2:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
147   	 003F	 B8440000		xmem[_echoState + 2] = i4			# LN: 138 | 
148   	 0040	 02177FFF		i7 -= 1			# LN: 139 | 
149   	 0041	 B3140027		i3 = xmem[i7]; i7 -= 1			# LN: 139, 139 | 
150   	 0042	 B2140007		i2 = xmem[i7]			# LN: 139 | 
151   						
152   						
153   						#%X_S_multitapEcho
154   						#-------------------------------------------------------------------------------
155   	 0043	 81880000	  ret
156   						
157   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

BRICK_SIZE                                                                      			  Unused Number				      16 (10H)
ECHO_MAX_LENGTH                                                                 			  Unused Number				      4096 (1000H)
MAX_HARDWARE_DSP_CHANNELS_FOR_ANY_CIRRUS_PLATFORM                               			  Unused Number				      16 (10H)
N_TAP                                                                           			  Unused Number				      4 (4H)
X_S_multitapEcho                                                                			  Public Relocatable       multitapEcho_GEN_0000:0027H
X_S_multitapEchoInit                                                            			  Public Relocatable       multitapEcho_GEN_0000:0000H
_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           			  Unused Variable		        0 (0H)
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__X_BL_TEMPBUFF7                                                                					 External   
___X_BL_TEMPBUFF                                                                					 External   
___X_BL_TEMPBUFF0                                                               					 External   
___X_BL_TEMPBUFF1                                                               					 External   
___X_BL_TEMPBUFF10                                                              					 External   
___X_BL_TEMPBUFF11                                                              					 External   
___X_BL_TEMPBUFF12                                                              					 External   
___X_BL_TEMPBUFF13                                                              					 External   
___X_BL_TEMPBUFF14                                                              					 External   
___X_BL_TEMPBUFF15                                                              					 External   
___X_BL_TEMPBUFF2                                                               					 External   
___X_BL_TEMPBUFF3                                                               					 External   
___X_BL_TEMPBUFF4                                                               					 External   
___X_BL_TEMPBUFF5                                                               					 External   
___X_BL_TEMPBUFF6                                                               					 External   
___X_BL_TEMPBUFF8                                                               					 External   
___X_BL_TEMPBUFF9                                                               					 External   
___X_BX_TEMPBUFF                                                                					 External   
___X_BX_TEMPBUFF0                                                               					 External   
___X_BX_TEMPBUFF1                                                               					 External   
___X_BX_TEMPBUFF10                                                              					 External   
___X_BX_TEMPBUFF11                                                              					 External   
___X_BX_TEMPBUFF12                                                              					 External   
___X_BX_TEMPBUFF13                                                              					 External   
___X_BX_TEMPBUFF14                                                              					 External   
___X_BX_TEMPBUFF15                                                              					 External   
___X_BX_TEMPBUFF2                                                               					 External   
___X_BX_TEMPBUFF3                                                               					 External   
___X_BX_TEMPBUFF4                                                               					 External   
___X_BX_TEMPBUFF5                                                               					 External   
___X_BX_TEMPBUFF6                                                               					 External   
___X_BX_TEMPBUFF7                                                               					 External   
___X_BX_TEMPBUFF8                                                               					 External   
___X_BX_TEMPBUFF9                                                               					 External   
___X_BY_IOBUFFER_PTRS                                                           					 External   
___X_BY_TEMPBUFF                                                                					 External   
___X_BY_TEMPBUFF0                                                               					 External   
___X_BY_TEMPBUFF1                                                               					 External   
___X_BY_TEMPBUFF10                                                              					 External   
___X_BY_TEMPBUFF11                                                              					 External   
___X_BY_TEMPBUFF12                                                              					 External   
___X_BY_TEMPBUFF13                                                              					 External   
___X_BY_TEMPBUFF14                                                              					 External   
___X_BY_TEMPBUFF15                                                              					 External   
___X_BY_TEMPBUFF2                                                               					 External   
___X_BY_TEMPBUFF3                                                               					 External   
___X_BY_TEMPBUFF4                                                               					 External   
___X_BY_TEMPBUFF5                                                               					 External   
___X_BY_TEMPBUFF6                                                               					 External   
___X_BY_TEMPBUFF7                                                               					 External   
___X_BY_TEMPBUFF8                                                               					 External   
___X_BY_TEMPBUFF9                                                               					 External   
___X_VX_NEXTFRM_REINIT_REQ                                                      					 External   
___X_VX_PPM_INPUTMODE                                                           					 External   
___X_VX_PPM_INPUT_CHANNELS                                                      					 External   
___X_VX_PPM_OUTPUTMODE                                                          					 External   
___X_VX_PPM_OUTPUT_CHANNELS                                                     					 External   
___X_VX_PPM_SAMPLERATE                                                          					 External   
___X_VX_PPM_VALID_CHANNELS                                                      					 External   
___X_VX_REINIT                                                                  					 External   
___X_VX_UNDERFLOW                                                               					 External   
___X_VY_BRICK_SIZE                                                              					 External   
_cl_get_mcv_pointer                                                             					 External   
_cl_mcv_peek                                                                    					 External   
_cl_mcv_poke                                                                    					 External   
_echoState                                                                      					 External   
_echo_buffer                                                                    					 External   
_framework_interface_asm_h_                                                     			  Unused Relocatable        __INIT:0000H
_initial_delay                                                                  					 External   
_initial_gain                                                                   					 External   
_initial_input_gain                                                             					 External   
_mtechoDataVars_h_                                                              			  Unused Relocatable        __INIT:0000H
_mtechoGlobalConsts_h_                                                          			  Unused Relocatable        __INIT:0000H
_multitapEcho_a_                                                                			  Unused Relocatable        __INIT:0000H
_multitapEcho_h_                                                                			  Unused Relocatable        __INIT:0000H
cl_I2C_Abort_Message                                                            					 External   
cl_I2C_Command_Word                                                             					 External   
cl_I2C_Nonblocking_ReadMsg                                                      					 External   
cl_I2C_Nonblocking_WriteMsg                                                     					 External   
cl_I2C_ReadMsg                                                                  					 External   
cl_I2C_WriteMsg                                                                 					 External   
cl_clearNM0_7                                                                   					 External   
cl_get_i2c_cmd_word                                                             					 External   
cl_get_i2c_msg_busy                                                             					 External   
cl_get_i2c_msg_error                                                            					 External   
cl_get_i2c_msg_fifo_ptr                                                         					 External   
cl_get_i2c_msg_pending_reads                                                    					 External   
cl_get_i2c_msg_pending_writes                                                   					 External   
cl_mallocL                                                                      					 External   
cl_mallocModL                                                                   					 External   
cl_mallocModX                                                                   					 External   
cl_mallocModY                                                                   					 External   
cl_mallocX                                                                      					 External   
cl_mallocY                                                                      					 External   
cl_os_register_gpi_handler                                                      					 External   
cl_peek_gpi                                                                     					 External   
cl_poke_gpo                                                                     					 External   
cl_send_unsol_msg                                                               					 External   
for_end_0                                                                       			  Unused Relocatable        multitapEcho_GEN_0000:000DH
for_end_1                                                                       			  Unused Relocatable        multitapEcho_GEN_0000:0023H
for_end_2                                                                       			  Unused Relocatable        multitapEcho_GEN_0000:003FH
for_end_3                                                                       			  Unused Relocatable        multitapEcho_GEN_0000:003EH
label_begin_92                                                                  			  Unused Relocatable        multitapEcho_GEN_0000:0037H
label_begin_93                                                                  			  Unused Relocatable        multitapEcho_GEN_0000:002BH
label_begin_94                                                                  			  Unused Relocatable        multitapEcho_GEN_0000:000BH
label_begin_95                                                                  			  Unused Relocatable        multitapEcho_GEN_0000:001AH
label_end_92                                                                    			         Relocatable         multitapEcho_GEN_0000:003DH
label_end_93                                                                    			         Relocatable         multitapEcho_GEN_0000:003EH
label_end_94                                                                    			         Relocatable         multitapEcho_GEN_0000:000CH
label_end_95                                                                    			         Relocatable         multitapEcho_GEN_0000:0022H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0044H	 multitapEcho_GEN_0000                   			 CODE_OVLY                               
