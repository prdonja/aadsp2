1     						################################################################################
2     						##*/**
3     						##** @file lesson04ProgramFlow.a
4     						##**
5     						##** Module: lessons
6     						##** Description: Execution Control Instructions
7     						##** $Source: $
8     						##** $Revision: $
9     						##** $Date: $
10    						##** $Author: $
11    						##**
12    						##**/
13    						################################################################################
14    	 0000				_lesson04ProgramFlow_a_
15    						
16    	 0000					.public X_S_ProgramFlow
17    						
18    						lesson04ProgramFlow_code    .code_ovly
18     >> start of macro: .code_ovly
1+    									seg_single lesson04ProgramFlow_code, "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "lesson04ProgramFlow_code" != "" ) & defined( ___SegStart_CODE_lesson04ProgramFlow_code )
2+    						lesson04ProgramFlow_code    segment
3+    						  .else
4+    						lesson04ProgramFlow_code    segment "CODE_OVLY"
5+    							.if "lesson04ProgramFlow_code" != ""
6+    	 0000				___SegStart_CODE_lesson04ProgramFlow_code
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
19    						
20    						################################################################################
21    						
22    						################################################################################
23    						##*/**
24    						##** @Author  Milan Acanski
25    						##** @Date 25. November 2008.
26    						##**
27    						##** Function:
28    						##** X_S_ProgramFlow
29    						##**
30    						##** @param - none
31    						##**
32    						##** @return - nothing
33    						##**
34    						##** Trashes: a0, a1, b0, i0
35    						##** Comment: Examples of program flow instructions
36    						##**
37    						##** E-mail: milan.acanski@rt-sp.com
38    						##**/
39    						##*void X_S_ProgramFlow()
40    						##*{
41    						##*
42    						##*}
43    						################################################################################
44    	 0000				X_S_ProgramFlow:
45    						    #---------------------------------------------------------------------------
46    						    # Hardware loop
47    						
48    						    # Example 1. constant as loop counter
49    	 0000	 00004DC0	    a0 = 0
50    	 0001	 8C4A0001	    uhalfword(b0) = (1)
51    	 0002	 82000003	    do(32),>Loop            #<--| do(32)
52    	 0003	 00004420	%Loop: a0 = a0 + b0         #<--|   a0++;
53    						
54    						    # Example 2. loop counter as value in index reg.
55    	 0004	 B04A0020	    i0 = (32)
56    	 0005	 00004DC0	    a0 = 0
57    	 0006	 80010007	    do(i0),>Loop            #<--| do(32)
58    	 0007	 00004420	%Loop:  a0 = a0 + b0        #<--|   a0++;
59    						    #---------------------------------------------------------------------------
60    						
61    						    #---------------------------------------------------------------------------
62    						    # Hardware loop break
63    	 0008	 B04A0020	    i0 = (32)
64    	 0009	 00004DC0	    a0 = 0
65    	 000A	 894A0008	    uhalfword(a1) = (8)
66    	 000B	 8001000E	    do(i0),>Loop                    #<--| do(32)
67    	 000C	 00004F08	        a0 - a1
68    	 000D	 84080010	        if (a==0) jmp >LoopBreak    #<--|   if (a0==8) break;
69    	 000E	 00004420	%Loop:  a0 = a0 + b0                #<--|   a0++;
70    						
71    	 000F	 80080011	    jmp  >LoopFinishedWithoutBreak  #<--| If loop is finished without break skip enddo
72    						                                    #^__| because stack pointer is already decremented
73    						
74    	 0010	 82080000	%LoopBreak: enddo                   #<--| Here loop is terminated before last iteraton so decramant
75    						                                    #^__| stack pointer
76    	 0011				%LoopFinishedWithoutBreak:
77    						    #---------------------------------------------------------------------------
78    						
79    						    #---------------------------------------------------------------------------
80    						    # Conditional and unconditional jump to address as symbol
81    						
82    						    # Example 1. Unconditional jump
83    	 0011	 80080014	    jmp >unconditionalLabel
84    	 0012	 00007FFF	    nop
85    	 0013	 00007FFF	    nop
86    	 0014				%unconditionalLabel:
87    						
88    						    # Example 2. Unconditional jump to adress in index registar
89    	 0014	 B04A0019	    i0 = (unconditionalLabel1)
90    	 0015	 00007FFF	    nop
91    	 0016	 80480000	    jmp (i0)
92    	 0017	 00007FFF	    nop
93    	 0018	 00007FFF	    nop
94    	 0019				unconditionalLabel1:
95    						
96    						    # Example 3. Conditional jump
97    	 0019	 00004DC0	    a0 = 0
98    	 001A	 00004E80	    a0 & a0
99    	 001B	 8408001E	    if (a==0) jmp >A0IsZero     #<--| Here A0 zero flag is set and we will jump
100   	 001C	 00007FFF	        nop
101   	 001D	 00007FFF	        nop
102   	 001E				%A0IsZero:
103   						
104   	 001E	 884A0001	    uhalfword(a0) = (1)
105   	 001F	 00004E80	    a0 & a0
106   	 0020	 84080023	    if (a==0) jmp >A0IsZero     #<--| Here A0 zero flag is not set and we will not jump
107   	 0021	 00007FFF	        nop
108   	 0022	 00007FFF	        nop
109   	 0023				%A0IsZero:
110   						
111   						    #---------------------------------------------------------------------------
112   						
113   						    #---------------------------------------------------------------------------
114   						    # Routines call
115   						
116   						    # Example 1. Function call
117   	 0023	 80880028	    call X_S_SampleFunction
118   	 0024	 00007FFF	    nop                         #<--| After function execution is finished this
119   						                                #^__| will be next executed instruction
120   						
121   						    # Example 1. Function call
122   	 0025	 8108002B	    callint X_S_SampleFunctionInterruptControll  #<--| Call functio and disable interrupts
123   	 0026	 00007FFF	    nop                         #<--| After function execution is finished this
124   						                                #^__| will be next executed instruction
125   						    #---------------------------------------------------------------------------
126   						
127   	 0027				ProgramFlow_End:
128   	 0027	 81880000	    ret
129   						################################################################################
130   						
131   						################################################################################
132   						##*/**
133   						##** @Author  Milan Acanski
134   						##** @Date 04. December 2008.
135   						##**
136   						##** Function:
137   						##** X_S_SampleFunction
138   						##**
139   						##** @param - none
140   						##**
141   						##** @return - nothing
142   						##**
143   						##** Trashes: nothing
144   						##** Comment: Show call and refurn functionality
145   						##**
146   						##** E-mail: milan.acanski@rt-sp.com
147   						##**/
148   						##*void X_S_SampleFunction()
149   						##*{
150   						##*
151   						##*}
152   						################################################################################
153   	 0028				X_S_SampleFunction:
154   						    #------------------------------------------------------
155   						    #TODO: Place Function Body Here.
156   	 0028	 00007FFF	    nop
157   	 0029	 00007FFF	    nop
158   						    #------------------------------------------------------
159   	 002A				SampleFunction_End:
160   	 002A	 81880000	    ret
161   						################################################################################
162   						
163   						################################################################################
164   						##*/**
165   						##** @Author  Milan Acanski
166   						##** @Date 04. December 2008.
167   						##**
168   						##** Function:
169   						##** X_S_SampleFunctionInterruptControll
170   						##**
171   						##** @param - none
172   						##**
173   						##** @return - nothing
174   						##**
175   						##** Trashes: nothing
176   						##** Comment: Show call and refurn functionality with intreeupt disable-enable
177   						##**          example
178   						##**
179   						##** E-mail: milan.acanski@rt-sp.com
180   						##**/
181   						##*void X_S_SampleFunctionInterruptControll()
182   						##*{
183   						##*
184   						##*}
185   						################################################################################
186   	 002B				X_S_SampleFunctionInterruptControll:
187   						    #------------------------------------------------------
188   						    #TODO: Place Function Body Here.
189   	 002B	 00007FFF	    nop
190   	 002C	 00007FFF	    nop
191   						    #------------------------------------------------------
192   	 002D				SampleFunctionInterruptControl_End:
193   	 002D	 81480000	    retcc       #<--| Return from funcion and enable interupts
194   						################################################################################195   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

ProgramFlow_End                                                                 			  Unused Relocatable        lesson04ProgramFlow_code:0027H
SampleFunctionInterruptControl_End                                              			  Unused Relocatable        lesson04ProgramFlow_code:002DH
SampleFunction_End                                                              			  Unused Relocatable        lesson04ProgramFlow_code:002AH
X_S_ProgramFlow                                                                 			  Public Relocatable       lesson04ProgramFlow_code:0000H
X_S_SampleFunction                                                              			         Relocatable         lesson04ProgramFlow_code:0028H
X_S_SampleFunctionInterruptControll                                             			         Relocatable         lesson04ProgramFlow_code:002BH
_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
___SegStart_CODE_lesson04ProgramFlow_code                                       			  Unused Relocatable        lesson04ProgramFlow_code:0000H
_lesson04ProgramFlow_a_                                                         			  Unused Relocatable        __INIT:0000H
lesson04ProgramFlow_code                                                        			  Unused Relocatable        lesson04ProgramFlow_code:0000H
unconditionalLabel1                                                             			         Relocatable         lesson04ProgramFlow_code:0019H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
002EH	 lesson04ProgramFlow_code                			 CODE_OVLY                               
