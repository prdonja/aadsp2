################################################################################
##*/**
##** @file lesson07ALUUnit.a
##**
##** Module: lessons
##** Description:  ALU unit instructions
##** $Source: $
##** $Revision: $
##** $Date: $
##** $Author: $
##**
##**/
################################################################################
_lesson07ALUUnit_a_

	.public X_S_ALUUnitInstructions

lesson07ALUUnit_code    .code_ovly

################################################################################

################################################################################
##*/**
##** @Author  Milan Acanski
##** @Date 30. December 2008.
##**
##** Function:
##** X_S_ALUUnitInstructions
##**
##** @param - none
##**
##** @return - nothing
##**
##** Trashes: a0, a1, a2, a3, b0, b1, b2, b3
##** Comment: Examples of single ALU instructions
##**
##** E-mail: milan.acanski@rt-sp.com
##**/
##*void X_S_ALUUnitInstructions()
##*{
##*
##*}
################################################################################
X_S_ALUUnitInstructions:
    #---------------------------------------------------------------------------
    # Add with Optional Shift Left by one position
    uhalfword(a2) = (0x5)               #<--| a2 = 0x00.00000005.00000000
    uhalfword(a1) = (0x2)               #<--| a1 = 0x00.00000002.00000000

    a3 = a2-a1                          #<--| a3 = 0x00.00000003.00000000
    a0 = (a2*2)-a1                      #<--| a0 = 0x00.00000008.00000000

    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    # Conditional Operation - Maximum
    uhalfword(b2) = (0x3)               #<--| b2 = 0x00.00000003.00000000
    uhalfword(b1) = (0x4)               #<--| b1 = 0x00.00000004.00000000

    if (a1>a2) b1=b2                    #<--| b1 remains unchanged

    if (b1>b2) a1=a2                    #<--| a1 will become 0x00.00000005.00000000
    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    # Conditional Operation - Minimum
    uhalfword(a2) = (0x5)               #<--| a2 = 0x00.00000005.00000000
    uhalfword(b1) = (0x4)               #<--| b1 = 0x00.00000004.00000000
    uhalfword(a1) = (0x2)               #<--| a1 = 0x00.00000002.00000000

    if (b1<b2) a1=a2                    #<--| a1 remains unchanged
    if (a1<a2) b1=b2                    #<--| b1 will become 0x00.00000003.00000000
    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    # Bitwise Accumulator Move
    halfword(b3) = (-5)                 #<--|
    ufixed16(b3l) = (0x8000)            #^__| b3 = 0xff.fffffffb.80000000

    a0 =+ b3                            #<--| a0 = 0xff.fffffffb.80000000
    a1 = b3                             #<--| a1 = 0xff.fffffffb.00000000
    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    # Bitwise Complement
    a2 =~ b3                            #<--| a2 = 0x00.00000004.7fffffff
    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    # Accum Negative Accumulator Move
    a0 =- b3                            #<--| a0 = 0x00.00000004.80000000
    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    # Absolute Value Accumulator Move
    b0 = |b3|                           #<--| b0 = 0x00.00000004.80000000
    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    # Bitwise OR, XOR, AND, ZERO
    uhalfword(a1) = (0x1200)
    uhalfword(b1) = (0x34)
    a0 = 0                              #<--| Zero out a0 (0x00.00000000.00000000)
    a1 = a1 | b1                        #<--| a0 = 0x00.00001234.00000000

    uhalfword(a0) = (0x1035)
    a0 = a0 ^ a1                        #<--| a0 = 0x00.00000201.00000000

    uhalfword(a1) = (0x1)
    a0 = a0 & a1                        #<--| a0 = 0x00.00000001.00000000
    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    # Shift Examples
    ufixed16(a1) = (0x0009)             #<--| a0 = 0x00.00090000.00000000

    a1 = a1 >> 1                        #<--| a0 = 0x00.00048000.00000000

    a1 = a1 << 1                        #<--| a0 = 0x00.00090000.00000000

    a1 = a1 << 4                        #<--| a0 = 0x00.00900000.00000000

    a1 = a1 << 8                        #<--| a0 = 0x00.90000000.00000000
                                        #   | Note that when MSB bit of high acc part gets
                                        #   | set to one as a result of right shift sign of number will
                                        #^__| not be changed (as it is case in for example C language)
    #---------------------------------------------------------------------------
ALUUnitInstructions_End:
    ret
################################################################################
